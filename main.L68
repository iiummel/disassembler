00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.14.00
Created On: 2/26/2014 1:35:38 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Team Bits Disassembler
00000000                             3  * Written by :  Himanshu Mehru, William Tanna, Igor Ummel
00000000                             4  * Date       :  Who cares? Our code is timeless mofo.
00000000                             5  * Description:  68K Disassembler
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  
00001000                             9      
00001000  43F9 0000107E             10              LEA        INTRO,A1         Display intro message
00001006  103C 000E                 11              MOVE.B     #14,D0
0000100A  4E4F                      12              TRAP       #15
0000100C                            13   
0000100C  6000 0006                 14              BRA        START_ADDR       Branch to request starting address
00001010                            15  
00001010  FFFF FFFF                 16      SIMHALT             ; halt simulator
00001014                            17  
00001014  43F9 000010A3             18  START_ADDR  LEA        ST_ADDR_MSG,A1   Display starting address message
0000101A  103C 000E                 19              MOVE.B     #14,D0
0000101E  4E4F                      20              TRAP       #15
00001020                            21             
00001020  43F9 000010E6             22              LEA        ST_INPUT,A1      Stores user input into memory
00001026  7002                      23              MOVEQ      #2,D0
00001028  4E4F                      24              TRAP       #15
0000102A                            25              
0000102A  4EB9 0000104C             26              JSR        ASC_HEX          Convert ascii to hex         
00001030                            27  
00001030  43F9 000010C5             28  END_ADDR    LEA        EN_ADDR_MSG,A1   Display starting address message
00001036  103C 000E                 29              MOVE.B     #14,D0
0000103A  4E4F                      30              TRAP       #15
0000103C                            31              
0000103C  43F9 00001136             32              LEA        EN_INPUT,A1      Stores user input into memory
00001042  7002                      33              MOVEQ      #2,D0
00001044  4E4F                      34              TRAP       #15
00001046  4EB9 0000104C             35              JSR        ASC_HEX          Branch to ascii to hex convesion 
0000104C                            36  
0000104C  0C01 0000                 37  ASC_HEX     CMPI.B      #$0,D1          Check to see if all ascii characters are converted
00001050  6700 002A                 38              BEQ         END
00001054  1419                      39              MOVE.B     (A1)+,D2         Move first number to data register
00001056  0C02 0039                 40              CMPI.B      #$39,D2         See if D2 is a number
0000105A  6F00 000A                 41              BLE         CON_NUM          
0000105E                            42              
0000105E  0402 0037                 43  CON_LET     SUBI.B      #$37,D2         Convert ascii to hex letter
00001062  6000 000A                 44              BRA         COUNTER        
00001066                            45  
00001066  0402 0030                 46  CON_NUM     SUBI.B      #$30,D2         Convert ascii to hex number
0000106A  6000 0002                 47              BRA         COUNTER
0000106E                            48  
0000106E                            49              
0000106E  5301                      50  COUNTER     SUBI.B      #$1,D1          Decrement counter
00001070  D602                      51              ADD.B       D2,D3           Add converted number to rest of convereted address
00001072  0C01 0000                 52              CMPI.B      #$0,D1          Check to see if all ascii characters are converted
00001076  67D4                      53              BEQ         ASC_HEX        
00001078  E99B                      54              ROL.L       #4,D3           Move converted address number to the left to add new number.
0000107A                            55  
0000107A  60D0                      56              BRA         ASC_HEX
0000107C                            57  
0000107C  4E75                      58  END         RTS
0000107E                            59  ********************************************************
0000107E                            60  * DISPLAY MESSAGES                                     *
0000107E                            61  ********************************************************
0000107E                            62  
0000107E  =0000000D                 63  CR          EQU     $0D
0000107E  =0000000A                 64  LF          EQU     $0A
0000107E= 44 69 73 61 73 73 ...     65  INTRO       DC.B    'Disassembler Program for Team Bits',CR,LF,0
000010A3= 50 6C 65 61 73 65 ...     66  ST_ADDR_MSG DC.B    'Please enter a starting address: ',0
000010C5= 50 6C 65 61 73 65 ...     67  EN_ADDR_MSG DC.B    'Please enter an ending address: ',0
000010E6                            68  ST_INPUT    DS.B    80
00001136                            69  EN_INPUT    DS.B    80
00001186                            70      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC_HEX             104C
CON_LET             105E
CON_NUM             1066
COUNTER             106E
CR                  D
END                 107C
END_ADDR            1030
EN_ADDR_MSG         10C5
EN_INPUT            1136
INTRO               107E
LF                  A
START               1000
START_ADDR          1014
ST_ADDR_MSG         10A3
ST_INPUT            10E6
